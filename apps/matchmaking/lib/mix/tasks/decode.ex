defmodule Mix.Tasks.Decode do
  alias Matchmaking.Proxy.Utility
  use Mix.Task
  require Logger

  def run(_) do
    data = Base.decode
    total_size = byte_size(data)

    Utility.as_base_2(data) |> IO.inspect(label: "hmmm")

    for i <- 0..total_size do
      my_slice = data |> :binary.bin_to_list() |> Enum.reverse() |> :binary.list_to_bin() |> String.slice(i, total_size)

      try do
        case CBOR.decode(my_slice) do
          {:ok, val, _} -> val  |> IO.inspect(label: "cbor")
          _ -> :ok
        end
      rescue
        _ -> :ok
      end

    end

    Logger.info("Expanded!")
  end
end
